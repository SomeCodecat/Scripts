# Configuration for backup_stacks.sh
# Copy this file to the install location and edit values as needed.
# Variables here override the script defaults. You can also set environment variables
# (for example via systemd or cron) to override these values.

# URL to your Portainer instance (include scheme and port if necessary)
PORTAINER_URL="https://portainer.example:9443"

# Portainer API key with permission to list stacks
PORTAINER_API_KEY="your_api_key_here"

# Directory where backups will be written. The script will create it if missing.
# Use an absolute path.
BACKUP_DIR="/opt/portainer_backups/backups"

# Name of the Docker volume where Portainer stores its data (the script mounts it read-only)
PORTAINER_VOLUME="portainer_data"

# Alpine image used to run a temporary container for file copy. You can pin a specific digest/tag.
ALPINE_IMAGE="alpine:3.19"

# Additional flags to pass to curl when contacting Portainer (e.g. --tlsv1.2)
#CURL_OPTS=""

# If you want timestamps appended to filenames, uncomment and use this pattern.
#TIMESTAMP_FMT="_%F" # e.g. _2025-10-23

# SIMPLE_MODE: when true, files are saved by stack id only (no human-readable name link).
# Set to true to save files like "stack_<ID>.yml" instead of "<stack-name>.yml".
SIMPLE_MODE="false"
# Prefix to use for simple filenames (e.g. stack_ -> stack_<ID>.yml)
SIMPLE_PREFIX="stack_"

# Rotation: keep the most recent N backups per stack. Set to 0 to keep all.
KEEP_COUNT=7

# Timestamp format appended to filenames when KEEP_COUNT>0 or if you want historical copies.
# Uses strftime format. Default includes date+time to avoid collisions.
TIMESTAMP_FMT="_%F_%H%M%S"

# Curl retries when contacting Portainer API
CURL_RETRIES=3
CURL_BACKOFF_SEC=5

# Minimum free bytes required in BACKUP_DIR before attempting a copy (0 = no check)
# Set to something like 10485760 (10MB) to avoid trivial writes when storage is nearly full.
MIN_FREE_BYTES=10485760

# Log size limit in bytes (rotate when exceeded). Set to 0 to disable log rotation.
LOG_MAX_BYTES=5242880
 
# Docker copy retries
DOCKER_RETRIES=2
DOCKER_BACKOFF_SEC=5

# Path to the log file the cron job writes to. Used for simple rotation.
# Ensure the script has permission to rotate this file (usually root).
LOG_FILE="/var/log/portainer_backup.log"

# HTTP header name used to send the API key (most Portainer installs use X-API-Key)
API_KEY_HEADER="X-API-Key"

# Inside the Portainer data volume, where compose folders live (inside the container)
# The script will look for files under: ${COMPOSE_DIR_PREFIX}/${STACK_ID}/<compose-file>
COMPOSE_DIR_PREFIX="/data/compose"

# Space-separated list of candidate compose filenames to try (in order)
COMPOSE_CANDIDATES="docker-compose.yml docker-compose.yaml"

# Path inside the helper container where backup dir is mounted (default /backups)
CONTAINER_BACKUP_MOUNT="/backups"

# If true, append a timestamp to each filename when saving.
# You can still use KEEP_COUNT for rotation; timestamping avoids accidental overwrites.
USE_TIMESTAMPS="false"

# If true, attempt to back up environment variables for each stack via the Portainer API.
# This will create a .env file alongside the compose file inside the stack directory.
BACKUP_ENVS="true"

# If true, perform a dry run (show what would be done without making changes).
# Useful for testing configuration and rotation logic.
DRY_RUN="false"
